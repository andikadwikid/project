// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id       Int       @id @default(autoincrement())
  code     String    @unique
  name     String
  products Product[]

  @@map("categories")
}

model Brand {
  id       Int       @id @default(autoincrement())
  code     String    @unique
  name     String
  products Product[]

  @@map("brands")
}

model Product {
  id          Int            @id @default(autoincrement())
  code        String         @unique
  name        String
  description String?
  categoryId  Int            @map("category_id")
  brandId     Int            @map("brand_id")
  price       Decimal        @db.Decimal(10, 2)
  isActive    Boolean        @default(true) @map("is_active")
  createdAt   DateTime       @default(now()) @map("created_at")
  
  category     Category       @relation(fields: [categoryId], references: [id])
  brand        Brand          @relation(fields: [brandId], references: [id])
  colors       ProductColor[]
  sizes        ProductSizePivot[]
  images       ProductImage[]

  @@map("products")
}

model Color {
  id        Int            @id @default(autoincrement())
  code      String         @unique
  name      String
  hexCode   String?        @map("hex_code")
  createdAt DateTime       @default(now()) @map("created_at")
  
  productColors ProductColor[]

  @@map("colors")
}

model ProductColor {
  id        Int            @id @default(autoincrement())
  productId Int            @map("product_id")
  colorId   Int            @map("color_id")
  imageUrl  String?        @map("image_url")
  
  product Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  color   Color          @relation(fields: [colorId], references: [id], onDelete: Cascade)
  images  ProductImage[]

  @@unique([productId, colorId])
  @@map("product_colors")
}

model Size {
  id        Int       @id @default(autoincrement())
  code      String    @unique
  sizeLabel String    @map("size_label")
  cmValue   Decimal?  @map("cm_value") @db.Decimal(4, 1)
  createdAt DateTime  @default(now()) @map("created_at")
  
  products  ProductSizePivot[]

  @@map("sizes")
}

model ProductSizePivot {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  sizeId    Int      @map("size_id")
  cmValue   Decimal? @map("cm_value") @db.Decimal(4, 1)
  createdAt DateTime @default(now()) @map("created_at")
  
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  size    Size    @relation(fields: [sizeId], references: [id], onDelete: Cascade)

  @@unique([productId, sizeId])
  @@map("product_size_pivot")
}

model ProductImage {
  id             Int           @id @default(autoincrement())
  productId      Int           @map("product_id")
  productColorId Int?          @map("product_color_id")
  imageUrl       String        @map("image_url")
  isPrimary      Boolean       @default(false) @map("is_primary")
  sortOrder      Int           @default(0) @map("sort_order")
  
  product      Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productColor ProductColor? @relation(fields: [productColorId], references: [id], onDelete: Cascade)

  @@map("product_images")
}
